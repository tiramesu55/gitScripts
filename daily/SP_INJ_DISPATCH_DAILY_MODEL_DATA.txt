--truncate table E_SANDBOX.MODEL_DATA.INJ_DISPATCH_DAILY
CREATE OR REPLACE PROCEDURE E_SANDBOX.SILVER.SP_INJ_DISPATCH_DAILY_MODEL_DATA( DATA_TAG_ID INTEGER)
RETURNS INTEGER
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE

  rows_inserted INTEGER;
BEGIN

INSERT INTO E_SANDBOX.MODEL_DATA.INJ_DISPATCH_DAILY
WITH INJ_DISPATCH_DA AS
    (SELECT * FROM E_SANDBOX.MODEL_DATA.INJ_DISPATCH
      WHERE cycle = 'DA' AND DATA_TAG_ID = :DATA_TAG_ID), 
      
INJ_DISPATCH_RT AS
    (SELECT * FROM E_SANDBOX.MODEL_DATA.INJ_DISPATCH
      WHERE cycle = 'RT' AND DATA_TAG_ID = :DATA_TAG_ID ), 

INJ_DISPATCH_CALC AS (
    SELECT
        INJ_DISPATCH_DA.DATA_TAG_ID,
        INJ_DISPATCH_DA.INJECTOR_ID,
        INJ_DISPATCH_DA.DT_LOCAL,
        INJ_DISPATCH_DA.POWER_PLANT_ID,
        INJ_DISPATCH_DA.GENERATION * INJ_DISPATCH_DA.LMP + (INJ_DISPATCH_RT.GENERATION -  INJ_DISPATCH_DA.GENERATION) * INJ_DISPATCH_RT.LMP AS GROSS_ENERGY_MARGIN,
        INJ_DISPATCH_DA.GENERATION * INJ_DISPATCH_DA.LMP + (INJ_DISPATCH_RT.GENERATION -  INJ_DISPATCH_DA.GENERATION) * INJ_DISPATCH_RT.LMP AS ENERGY_REVENUE,
        INJ_DISPATCH_DA.ANCILLARY_SERVICES_REVENUE + INJ_DISPATCH_RT.ANCILLARY_SERVICES_REVENUE AS ANCILLARY_SERVICES_REVENUE,
        INJ_DISPATCH_RT.SUBSIDY AS SUBSIDY,
        INJ_DISPATCH_RT.REC_REVENUE AS REC_REVENUE,
        INJ_DISPATCH_RT.TOTAL_COST AS TOTAL_COST,
        INJ_DISPATCH_RT.VOM_COST AS VOM_COST,
        INJ_DISPATCH_RT.FUEL_COST AS FUEL_COST,
        INJ_DISPATCH_RT.EMISSIONS_COST AS EMISSIONS_COST,
        INJ_DISPATCH_DA.CAP AS CAP
    FROM INJ_DISPATCH_DA
    LEFT JOIN INJ_DISPATCH_RT
    ON INJ_DISPATCH_DA.DATA_TAG_ID = INJ_DISPATCH_RT.DATA_TAG_ID AND
       INJ_DISPATCH_DA.INJECTOR_ID = INJ_DISPATCH_RT.INJECTOR_ID AND
       INJ_DISPATCH_DA.case_id = INJ_DISPATCH_RT.case_Id AND
       INJ_DISPATCH_DA.DT_UTC = INJ_DISPATCH_RT.DT_UTC
    WHERE INJ_DISPATCH_DA.DATA_TAG_ID =  :DATA_TAG_ID
)

SELECT
    DATA_TAG_ID,
    INJECTOR_ID,
    DATE,
    POWER_PLANT_ID,
    TOTAL_REVENUE_NO_UPLIFT +
        GREATEST(TOTAL_COST - TOTAL_REVENUE_NO_UPLIFT, 0) - 
        TOTAL_COST
    AS GROSS_ENERGY_MARGIN,
    TOTAL_REVENUE_NO_UPLIFT +
        GREATEST(TOTAL_COST - TOTAL_REVENUE_NO_UPLIFT, 0) 
    AS TOTAL_REVENUE,
    TOTAL_REVENUE_NO_UPLIFT,
    ENERGY_REVENUE,
    ANCILLARY_SERVICES_REVENUE,
    GREATEST(TOTAL_COST - TOTAL_REVENUE_NO_UPLIFT, 0) AS UPLIFT_REVENUE,
    SUBSIDY,
    REC_REVENUE,
    TOTAL_COST,
    VOM_COST,
    FUEL_COST,
    EMISSIONS_COST,
    CAPACITY
    
    FROM
    (SELECT
        DATA_TAG_ID,
        INJECTOR_ID,
        DATE_TRUNC('day', DT_LOCAL) AS DATE,
        POWER_PLANT_ID,
        SUM(ENERGY_REVENUE +
            ANCILLARY_SERVICES_REVENUE + 
            SUBSIDY + 
            REC_REVENUE)
        AS TOTAL_REVENUE_NO_UPLIFT,
        SUM(ENERGY_REVENUE) AS ENERGY_REVENUE,
        SUM(ANCILLARY_SERVICES_REVENUE) AS ANCILLARY_SERVICES_REVENUE,
        SUM(SUBSIDY) AS SUBSIDY,
        SUM(REC_REVENUE) AS REC_REVENUE,
        SUM(TOTAL_COST) AS TOTAL_COST,
        SUM(VOM_COST) AS VOM_COST,
        SUM(FUEL_COST) AS FUEL_COST,
        SUM(EMISSIONS_COST) AS EMISSIONS_COST,
        SUM(CAP) as CAPACITY
        FROM INJ_DISPATCH_CALC
        GROUP BY DATA_TAG_ID, INJECTOR_ID, DATE, POWER_PLANT_ID);

   rows_inserted := SQLROWCOUNT;
   RETURN  rows_inserted;
END;
$$;   

-- CALL E_SANDBOX.SILVER.SP_INJ_DISPATCH_DAILY_MODEL_DATA(4)