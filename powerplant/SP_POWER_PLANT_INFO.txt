CREATE OR REPLACE PROCEDURE E_SANDBOX.SILVER.SP_POWER_PLANT_INFO( DATA_TAG_ID INTEGER)
RETURNS INTEGER
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE

  rows_inserted INTEGER;
BEGIN
INSERT INTO E_SANDBOX.MODEL_DATA.POWER_PLANT_INFO 
SELECT
    g.PLANT_ID,
    g.PLANT_NAME,
    g.ZONE_ID,
    g.MARKETID,
    g.UNIT_TYPE,
    g.CAPACITY_SUMMER,
    g.CAPACITY_WINTER,
    g.CAPACITY_NAMEPLATE,
    g.PRIMARY_FUEL_TYPE,
    g.SECONDARY_FUEL_TYPE,
    g.PRIMARY_FUEL_LOCATION,
    g.SECONDARY_FUEL_LOCATION,
    g.NON_FUEL_VOM,
    'SNL_PLANT_ID',
    'EIA_PLANT_CODE',
    g.COUNTY,
    g.STATE,
    g.LATITUDE,
    g.LONGITUDE,
    g.ONLINEDATE,
    g.RETIREDATE
FROM (
    SELECT
        PLANT_ID,
        PLANT_NAME,
        ZONE_ID,
        MARKETID,
        MIN(UNIT_TYPE) AS UNIT_TYPE,
        MAX(CAPACITY_SUMMER) AS CAPACITY_SUMMER,
        MIN(CAPACITY_WINTER) AS CAPACITY_WINTER,
        MIN(CAPACITY_NAMEPLATE) AS CAPACITY_NAMEPLATE,
        MIN(PRIMARY_FUEL_TYPE) AS PRIMARY_FUEL_TYPE,
        MIN(SECONDARY_FUEL_TYPE) AS SECONDARY_FUEL_TYPE,
        MIN(PRIMARY_FUEL_LOCATION) AS PRIMARY_FUEL_LOCATION,
        MIN(SECONDARY_FUEL_LOCATION) AS SECONDARY_FUEL_LOCATION,
        MIN(NON_FUEL_VOM) AS NON_FUEL_VOM,
        MIN(COUNTY) AS COUNTY,
        MIN(STATE) AS STATE,
        MIN(LATITUDE) AS LATITUDE,
        MIN(LONGITUDE) AS LONGITUDE,
        MIN(ONLINEDATE) AS ONLINEDATE,
        MAX(RETIREDATE) AS RETIREDATE
    FROM E_SANDBOX.SILVER.INJ_INFO
    GROUP BY MARKETID, PLANT_ID, ZONE_ID, PLANT_NAME
) g
WHERE NOT EXISTS (  
    SELECT 1 
    FROM E_SANDBOX.MODEL_DATA.POWER_PLANT_INFO  p
    WHERE g.PLANT_NAME = p.POWER_PLANT_NAME and g.marketid=p.market_id
);
    

   rows_inserted := SQLROWCOUNT;
   RETURN  rows_inserted;
END;
$$;

--call E_SANDBOX.SILVER.SP_POWER_PLANT_INFO( 9);