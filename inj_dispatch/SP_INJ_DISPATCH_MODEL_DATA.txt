CREATE OR REPLACE PROCEDURE E_SANDBOX.SILVER.SP_INJ_DISPATCH_MODEL_DATA( CASE_ID INT)
RETURNS INTEGER
LANGUAGE SQL
EXECUTE AS OWNER
AS
$$
DECLARE
  v_local_tz VARCHAR;
  v_behind_utc VARCHAR;
  rows_inserted INTEGER;
  v_data_tag_id integer;
  market_id integer;
BEGIN
-- find data_tag_id by case_id
   select data_tag_id into :v_data_tag_id from E_SANDBOX.BRONZE.MARKETSCENARIO where CASEID = :CASE_ID limit 1;
  IF (:v_data_tag_id IS NULL) THEN
    RETURN -1;
  end if;  
 -- Assign values from query into variables
  SELECT LOCAL_TZ, behind_utc, market_id
    INTO  :v_local_tz,:v_behind_utc, :market_id
    FROM E_SANDBOX.SILVER.DATA_TAG_KEY
   WHERE DATA_TAG_ID = :v_data_tag_id 
   LIMIT 1;

   IF (:v_behind_utc IS NULL) THEN 
      RETURN -2 ;
    end if;

INSERT INTO E_SANDBOX.MODEL_DATA.INJ_DISPATCH (
    DATA_TAG_ID,
    CYCLE,
    INJECTOR_ID,
    DT_UTC,
    POWER_PLANT_ID,
    DT_LOCAL,
    PERIOD,
    LMP,
    LMP_ENERGY,
    LMP_CONGESTION,
    LMP_LOSS,
    MER,
    GENERATION,
    MAX_MW,
    CURTAILMENT,
    CARBON_DISPLACEMENT,
    TOTAL_COST,
    VOM_COST,
    FUEL_COST,
    EMISSIONS_COST,
    SUBSIDY,
    REC_REVENUE,
    ANCILLARY_SERVICES_REVENUE,
    BIOMASS,
    COAL,
    FUEL_OIL,
    NATURAL_GAS,
    REFUSE,
    URANIUM,
    BIOMASS_COST,
    COAL_COST,
    FUEL_OIL_COST,
    NATURAL_GAS_COST,
    REFUSE_COST,
    URANIUM_COST,
    EMS_CO2,
    EMS_NOX,
    EMS_SO2,
    COST_CO2,
    COST_NOX,
    COST_SO2,
    REGUP,
    REGDOWN,
    SPIN,
    SUPP,
    NONSPIN,
    RAMPUP,
    RAMPDOWN,
    REGUP_REVENUE,
    REGDOWN_REVENUE,
    SPIN_REVENUE,
    SUPP_REVENUE,
    NONSPIN_REVENUE,
    RAMPUP_REVENUE,
    RAMPDOWN_REVENUE,
    CAP,
    CASE_ID
)

SELECT 
    :v_data_tag_id ,
    src.CYCLE,
    ref.INJECTOR_ID,
    DATEADD(HOUR, :v_behind_utc, TRY_TO_TIMESTAMP(src.DT_ENELYTIX, 'YYYY-MM-DD HH24:MI:SS')) AS DT_UTC,
    ref.PLANT_ID AS POWER_PLANT_ID,
    CONVERT_TIMEZONE('UTC', :v_local_tz, DATEADD(HOUR, :v_behind_utc, TRY_TO_TIMESTAMP(src.DT_ENELYTIX, 'YYYY-MM-DD HH24:MI:SS'))) as DT_LOCAL,
    src.PERIOD,
    src.LMP,
    src.LMP_ENERGY,
    src.LMP_CONGESTION,
    src.LMP_LOSS,
    src.MER,
    src.GENERATION,
    src.MAX_MW,
    src.CURTAILMENT,
    src.CARBON_DISPLACEMENT,
    src.TOTAL_COST,
    src.VOM_COST,
    src.FUEL_COST,
    src.EMISSIONS_COST,
    src.SUBSIDY,
    src.REC_REVENUE,
    src.ANCILLARY_SERVICES_REVENUE,
    src.BIOMASS,
    src.COAL,
    src.FUEL_OIL,
    src.NATURAL_GAS,
    src.REFUSE,
    src.URANIUM,
    src.BIOMASS_COST,
    src.COAL_COST,
    src.FUEL_OIL_COST,
    src.NATURAL_GAS_COST,
    src.REFUSE_COST,
    src.URANIUM_COST,
    src.EMS_CO2,
    src.EMS_NOX,
    src.EMS_SO2,
    src.COST_CO2,
    src.COST_NOX,
    src.COST_SO2,
    src.REGUP,
    src.REGDOWN,
    src.SPIN,
    src.SUPP,
    src.NONSPIN,
    src.RAMPUP,
    src.RAMPDOWN,
    src.REGUP_REVENUE,
    src.REGDOWN_REVENUE,
    src.SPIN_REVENUE,
    src.SUPP_REVENUE,
    src.NONSPIN_REVENUE,
    src.RAMPUP_REVENUE,
    src.RAMPDOWN_REVENUE,
    src.CAP,
    src.CASE_ID
FROM E_SANDBOX.BRONZE.INJ_DISPATCH src
INNER JOIN E_SANDBOX.SILVER.INJ_INFO ref
  ON src.INJECTOR = ref.INJECTOR AND ref.MARKETID=:market_id
WHERE src.CASE_ID = :CASE_ID ;

 rows_inserted := SQLROWCOUNT;
 RETURN  rows_inserted;
END;
$$;

--CALL  E_SANDBOX.SILVER.SP_INJ_DISPATCH_MODEL_DATA( 30295);  